pipeline {
    agent any
    triggers {
      githubPush()
   }
    environment {
        DOCKER_IMAGE_NAME = 'calculator'
        GITHUB_REPO_URL = 'git@github.com:chaudhari-akash/Calculator.git'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Checkout the code from the GitHub repository
                    git branch: 'master', url: "${GITHUB_REPO_URL}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    docker.build("${DOCKER_IMAGE_NAME}", '.')
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script{
                    docker.withRegistry('', 'DockerHubCred') {
                    sh 'docker tag calculator chaudhariakash/calculator:latest'
                    sh 'docker push chaudhariakash/calculator'
                    }
                 }
            }
        }

//             stage('Run Ansible Playbook') {
//                steps {
// //                    script {
// //                      withEnv(["ANSIBLE_HOST_KEY_CHECKING=False"]) {
// //                        ansiblePlaybook(
// //                            playbook: 'deploy.yml',
// //                            inventory: 'inventory'
// //                        )
// //                    }
// //                }
//            }
//         }
//        }
        post {
               success {
                   mail to: 'b.thangaraju@iiitb.ac.in',
                        subject: "Application Deployment SUCCESS: Build ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        body: "The build was successful!"
               }
               failure {
                   mail to: 'b.thangaraju@iiitb.ac.in',
                        subject: "Application Deployment FAILURE: Build ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        body: "The build failed."
               }
               always {
                   cleanWs()
               }
             }
           }
